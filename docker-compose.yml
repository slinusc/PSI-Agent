version: '3.8'

services:
  # ============================================================================
  # CHAINLIT APP
  # ============================================================================
  chainlit-app:
    build:
      context: .
      dockerfile: app/Dockerfile
    container_name: psi-chainlit-app
    ports:
      - "8000:8000"
    environment:
      - OLLAMA_HOST=http://host.docker.internal:11434
      - MCP_ELOG_URL=http://mcp-server-elog:8002
      - MCP_ACCWIKI_URL=http://mcp-server-accwiki:8001
      - MCP_WEBSEARCH_URL=http://mcp-server-websearch:8003
      - DATABASE_URL=${DATABASE_URL}
      - CHAINLIT_AUTH_SECRET=${CHAINLIT_AUTH_SECRET}
      - CHAINLIT_ADMIN_USERNAME=${CHAINLIT_ADMIN_USERNAME}
      - CHAINLIT_ADMIN_PASSWORD=${CHAINLIT_ADMIN_PASSWORD}
      - PYTHONUNBUFFERED=${PYTHONUNBUFFERED}
    volumes:
      - ./app:/app
      - chainlit-uploads:/app/data/uploads
      - chainlit-logs:/app/logs
    depends_on:
      - postgres-chainlit
      - mcp-server-elog
      - mcp-server-accwiki
      - mcp-server-websearch
    restart: unless-stopped
    networks:
      - psi-network
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # ============================================================================
  # POSTGRESQL DATABASE (Chainlit State & Checkpoints)
  # ============================================================================
  postgres-chainlit:
    image: postgres:16-alpine
    container_name: postgres-chainlit
    ports:
      - "127.0.0.1:5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-chainlit-data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - psi-network


  # ============================================================================
  # MCP SERVER 1: ELOG
  # ============================================================================
  mcp-server-elog:
    build:
      context: .
      dockerfile: mcp-server-elog/Dockerfile
    container_name: mcp-server-elog
    command: ["python3", "-m", "elog_mcp.server"]
    ports:
      - "8002:8002"
    environment:
      - ELOG_URL=${ELOG_URL}
      - PYTHONUNBUFFERED=${PYTHONUNBUFFERED}
    volumes:
      - ./mcp-server-elog/elog_mcp:/app/elog_mcp
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - psi-network

  # ============================================================================
  # MCP SERVER 2: AccWiki (Knowledge Graph)
  # ============================================================================
  mcp-server-accwiki:
    build:
      context: .
      dockerfile: mcp-server-accwiki/Dockerfile
    container_name: mcp-server-accwiki
    command: ["python3", "-m", "accwiki_mcp.server"]
    ports:
      - "8001:8001"
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASS=${NEO4J_PASS}
      - EMBED_MODEL=${EMBED_MODEL}
      - USE_CUDA=${USE_CUDA}
      - PYTORCH_CUDA_ALLOC_CONF=${PYTORCH_CUDA_ALLOC_CONF}
      - HF_TOKEN=${HF_TOKEN}
      - PYTHONUNBUFFERED=${PYTHONUNBUFFERED}
    volumes:
      - ./mcp-server-accwiki/accwiki_mcp:/app/accwiki_mcp
      - model_cache:/root/.cache/huggingface
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    depends_on:
      - neo4j
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - psi-network

  # ============================================================================
  # MCP SERVER 3: WebSearch
  # ============================================================================
  mcp-server-websearch:
    build:
      context: .
      dockerfile: mcp-server-websearch/Dockerfile
    container_name: mcp-server-websearch
    command: ["python3", "-m", "websearch_mcp.server"]
    ports:
      - "8003:8003"
    environment:
      - SEARXNG_URL=http://searxng:8080
      - SEARXNG_TIMEOUT=${SEARXNG_TIMEOUT}
      - PYTHONUNBUFFERED=${PYTHONUNBUFFERED}
    volumes:
      - ./mcp-server-websearch/websearch_mcp:/app/websearch_mcp
    depends_on:
      - searxng
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import httpx; httpx.get('http://localhost:8003/healthz').raise_for_status()"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s
    networks:
      - psi-network

  # ============================================================================
  # DEPENDENCIES
  # ============================================================================

  # Neo4j database for AccWiki knowledge graph
  neo4j:
    image: neo4j:5.20
    container_name: neo4j-mcp
    ports:
      - "127.0.0.1:7474:7474"  # HTTP UI
      - "127.0.0.1:7687:7687"  # Bolt protocol
    environment:
      - NEO4J_AUTH=none
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*,gds.*
      - NEO4J_dbms_memory_heap_initial__size=1G
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=512M
    volumes:
      - knowledge_graph_rag_neo4j_data:/data
      - knowledge_graph_rag_neo4j_logs:/logs
      - knowledge_graph_rag_neo4j_import:/var/lib/neo4j/import
      - knowledge_graph_rag_neo4j_plugins:/plugins
    restart: unless-stopped
    networks:
      - psi-network

  # SearXNG search engine for WebSearch
  searxng:
    image: searxng/searxng:latest
    container_name: searxng
    ports:
      - "8888:8080"
    volumes:
      - ./mcp-server-websearch/config:/etc/searxng:rw
      - ./mcp-server-websearch/data:/var/cache/searxng:rw
    environment:
      - SEARXNG_BASE_URL=${SEARXNG_BASE_URL}
    restart: unless-stopped
    networks:
      - psi-network

# ============================================================================
# NETWORKS
# ============================================================================
networks:
  psi-network:
    driver: bridge

# ============================================================================
# VOLUMES
# ============================================================================
volumes:
  # Neo4j volumes (external - must be created beforehand)
  knowledge_graph_rag_neo4j_data:
    external: true
  knowledge_graph_rag_neo4j_logs:
    external: true
  knowledge_graph_rag_neo4j_import:
    external: true
  knowledge_graph_rag_neo4j_plugins:
    external: true

  # HuggingFace model cache (local)
  model_cache:
    external: false

  # Chainlit app volumes
  postgres-chainlit-data:
    external: false
  chainlit-uploads:
    external: false
  chainlit-logs:
    external: false
